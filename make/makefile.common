#-------------------------------------------------------------------------------
#                  .
#                .o8
#              .o888oo  .ooooo.  oo.ooooo.   .oooo.     oooooooo
#                888   d88' `88b  888' `88b `P  )88b   d'""7d8P
#                888   888   888  888   888  .oP"888     .d8P'
#                888 . 888   888  888   888 d8(  888   .d8P'  .P
#                "888" `Y8bod8P'  888bod8P' `Y888""8o d8888888P
#                                 888
#                                o888o
#
#                  T O P A Z   P A T T E R N   L I B R A R Y
#
#     TOPAZ is a library of SystemVerilog and UVM patterns and idioms.  The
#     code is suitable for study and for copying/pasting into your own work.
#
#    Copyright 2024 Mark Glasser
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#-------------------------------------------------------------------------------

# TOP must be defined as a path relative to the working directory.  It
# represents the top of the Xenon hierarchy.

V               = @
#V               =

include ${TOP}/make/tools.mk

TEST            = test
BUILDLOG        = build.log
RUNLOG          = run.log


#
# source code
#

INC             = +incdir+.

#
# commands
#

# VCS
# COMPILE_OPTS    = -sverilog                                            \
#                   -full64                                              \
#                   +vcs+lic+wait                                        \
#                   +libext+.v                                           \
#                   +libext+.sv                                          \
#                   -timescale=1ns/1ps                                   \
#                   -debug_access                                        \
#                   -xlrm module_xmr 

# Questa
COMPILE_OPTS	= -64                                                  \
                  -timescale=1ns/1ps                                   \
                  -ccflags "-DQUESTA"


COMPILE_CMD	= ${COMPILE} ${UVM_SRC} ${INC} ${SRC} ${COMPILE_OPTS}

# VCS
#RUN_ARGS	= +UVM_NO_RELNOTES +UVM_TESTNAME=${TEST} +fsdb+delta

# Questa
RUN_ARGS	= -64 -batch -lib work work.top -do 'run -all; quit' \
                   +UVM_NO_RELNOTES +UVM_TESTNAME=${TEST}

RUN_CMD		= ${RUN} ${RUN_ARGS}

#
# rules
#

all: build run

build: ${SRC}
	${V}echo "[BUILD]" `pwd`
	${V}echo ${COMPILE_CMD} > ${BUILDLOG} 2>&1
	${V}${COMPILE_CMD} >> ${BUILDLOG} 2>&1

run:
	${V}echo "[RUN]" `pwd`
	${V}echo ${RUN_CMD} > ${RUNLOG} 2>&1
	${V}${RUN_CMD} >> ${RUNLOG} 2>&1

readme:
	${V}if [ -f readme.md -a -x ${PANDOC} ]; then \
          ${PANDOC} readme.md --from=markdown --to=plain; \
          echo; \
          echo "------------------------------------------------------------------------"; \
          echo; \
        fi

latex:
	${V}if [ -f readme.md -a -x ${PANDOC} ]; then \
          ${PANDOC} readme.md --from=markdown --to=latex; \
        fi

clean:
	${V}echo "[CLEAN]" `pwd`
	${V}rm -f ${BUILDLOG} ${VCSLOG} *.log
	${V}rm -rf csrc simv.* vcdplus.vpd DVEfiles
	${V}rm -f simv ucli.key vc_hdrs.h
	${V}rm -f novas.* *.fsdb
	${V}rm -rf verdiLog nWav1eLog
	${V}rm -rf work
	${V}rm -f transcript
	${V}rm -f xx* *~ #*

# Local Variables:
# mode: makefile
# End:
